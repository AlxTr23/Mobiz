/*
 * FDPClient Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge by LiquidBounce.
 * https://github.com/SkidderMC/FDPClient/
 */
package net.ccbluex.liquidbounce.features.module.modules.other

import me.zywl.fdpclient.event.EventTarget
import me.zywl.fdpclient.event.PacketEvent
import me.zywl.fdpclient.event.UpdateEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import me.zywl.fdpclient.value.impl.BoolValue
import me.zywl.fdpclient.value.impl.IntegerValue
import net.minecraft.network.play.client.C15PacketClientSettings
import net.minecraft.network.play.server.*
import java.lang.reflect.Field
import java.util.*

@ModuleInfo(name = "AntiExploit", category = ModuleCategory.OTHER, array = false)
object AntiExploit : Module() {
    init {
        state = true
    }

    private val guardianValue = BoolValue("LessGuardian", true)
    private val maxArrowSpawn = IntegerValue("MaxArrowPerSecond", 100, 50, 1000)
    private val randomizeC15Value = BoolValue("RandomizeC15Packet", false)

    private var tick = 0
    private var arrowMax = 0
    private var guardianEffect = false
    private val random = Random()
    private val languages = arrayOf(
            "en_US", "af_ZA", "ar_SA", "bg_BG", "ca_ES", "cs_CZ", "da_DK", "de_DE", "el_GR", "es_AR",
            "es_ES", "es_MX", "et_EE", "fa_IR", "fi_FI", "fr_CA", "fr_FR", "he_IL", "hi_IN", "hr_HR",
            "hu_HU", "id_ID", "is_IS", "it_IT", "ja_JP", "ko_KR", "lt_LT", "lv_LV", "ms_MY", "nb_NO",
            "nl_NL", "nn_NO", "pl_PL", "pt_BR", "pt_PT", "ro_RO", "ru_RU", "sk_SK", "sl_SI", "sr_RS",
            "sv_SE", "th_TH", "tl_PH", "tr_TR", "uk_UA", "vi_VN", "zh_CN", "zh_TW"
    )


    @EventTarget
    fun onPacket(event: PacketEvent) {
        val packet = event.packet

        if (mc.thePlayer != null && mc.theWorld != null && packet is S0FPacketSpawnMob && mc.theWorld.loadedEntityList.size > 500) {
            event.cancelEvent()
        }

        if (packet is S08PacketPlayerPosLook) {
            if (Math.abs(packet.x) > 3.0E7 || Math.abs(packet.y) > 3.0E7 || Math.abs(packet.z) > 3.0E7) {
                event.cancelEvent()
            }
        }

        if (packet is S2APacketParticles) {
            if (packet.getParticleCount() > 1024) {
                event.cancelEvent()
            }
        }

        if (packet is S27PacketExplosion) {
            if (Math.abs(packet.func_149149_c()) > 100.0 || Math.abs(packet.func_149144_d()) > 100.0 || Math.abs(packet.func_149147_e()) > 100.0) {
                event.cancelEvent()
            }
        }

        if (packet is S2BPacketChangeGameState) {
            when(packet.gameState) {
                5 -> {
                    if(!mc.isDemo) {
                        event.cancelEvent()
                    }
                }
                10 -> {
                    if(guardianValue.get()) {
                        if (!guardianEffect) {
                            guardianEffect = true
                        } else {
                            event.cancelEvent()
                        }
                    }

                }
            }
        }


        if (packet is S0EPacketSpawnObject && packet.type == 60) {
            if (arrowMax++ > maxArrowSpawn.get()) {
                event.cancelEvent()
            }
        }

        if (packet is C15PacketClientSettings && randomizeC15Value.get()) {
            spoofView(packet)
            spoofLang(packet)
            println("C15 Ismael Packet ejected")
            val fields = packet.javaClass.declaredFields
            for (field in fields) {
                field.isAccessible = true
                println("${field.name}: ${field.get(packet)}")
            }
        }
    }

    private fun spoofView(packet: C15PacketClientSettings) {
        try {
            val viewField: Field = packet.javaClass.getDeclaredField("view")
            viewField.isAccessible = true
            viewField.setInt(packet, random.nextInt(11) + 5)
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }
    private fun spoofLang(packet: C15PacketClientSettings) {
        try {
            val langField: Field = packet.javaClass.getDeclaredField("lang")
            langField.isAccessible = true
            langField.set(packet, languages[Random().nextInt(languages.size)])
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }


    @EventTarget
    fun onUpdate(event: UpdateEvent) {
        if (tick++ >= 20) {
            tick = 0
            arrowMax = 0
            guardianEffect = false
        }
    }
}
